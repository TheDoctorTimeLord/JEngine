package ru.jengine.battlemodule.core;

import ru.jengine.battlemodule.core.battlepresenter.BattleActionPresenter;
import ru.jengine.battlemodule.core.behaviors.BehaviorObjectsManager;
import ru.jengine.battlemodule.core.commands.BattleCommandRegistrar;
import ru.jengine.battlemodule.core.events.BattleEvent;

/**
 * Главный класс для управления боем. Класс занимается инициализацией, выполнением процесса и остановкой боя. Данные
 * о ходе боя предоставляются с помощью {@link BattleActionPresenter презентера}. Инициируемые бои пошаговые, при
 * этом подразумевается одновременное выполнение всех действий для всех динамических сущностей.
 * <br>
 * Работа ботов и игроков в бою осуществляется с помощью {@link BehaviorObjectsManager}. Также через него передаются
 * доступные к исполнению команды для конкретных динамических сущностей в игре.
 * <b>Этапы боя:</b>
 * <ol>
 * <li>Инициализация боя. Используя разные {@link BattleGenerator} можно как сгенерировать новый бой, так и
 * подгрузить информацию о сохранённом бою. После этого этапа можно подписываться на произошедшие события в бою с
 * помощью {@link BattleActionPresenter}</li>
 * <li>Уведомление о стартовой информации для подписавшихся на события в бою</li>
 * <li>Выполнение хода в бою. По итогам этого действия все подписавшиеся на события в бою получать очередную часть
 * игровых событий. Выполнение ходов происходит до тех пор, пока бой не завершится</li>
 * <li>Остановка боя. В этом этапе происходит освобождение всех данных о бое</li>
 * </ol>
 */
public interface BattleMaster {
    /**
     * Подготавливает бой, инициализирует и настраивает всё, что необходимо для начала боя.
     *
     * @param battleGenerator Генератор боевого состояния. Отвечает за подготовку начального состояния
     * @param commandRegistrar Объект, руководящий регистрированием команд и работой с ними
     * @param behaviorObjectsManager Объект, обрабатывающей поведения всех динамических сущностей в бою
     */
    void prepareBattle(BattleGenerator battleGenerator, BattleCommandRegistrar commandRegistrar,
            BehaviorObjectsManager behaviorObjectsManager);

    /**
     * Уведомляет всех подписавшихся на информацию в бою о начальном состоянии боя
     */
    void informationAboutInitialize();

    /**
     * Выполняет один ход в бою. Ход делится на некоторое число фаз. В одну фазу происходят все действия всех
     * динамических сущностей одновременно. Если одна или более сущностей совершает сложное действие (например,
     * перемещение более чем на одну позицию), то это действие может быть разбито на несколько действий и выполнено в
     * разные фазы. Таким образом ход не закончится, пока каждое сложное действие не будет выполнено до конца или
     * прервано.<br>
     * При этом сложное действие в одну из фаз может потребовать дополнительные уточнения от поведения, руководящего
     * сущностью, которая производит действие.
     * <b>Пример сложного действия:</b>
     * <ol>
     * <li>Игрок выбрал действие прицеливание огнестрельным оружием в некоторую область. В <b>первую фазу</b>
     * персонаж прицеливается в заданную область.</li>
     * <li>В эту же фазу в зону прицеливания зашёл враждебный персонаж</li>
     * <li>Игроку отправляется выбор: стрелять во врага или нет</li>
     * <li>Игрок выбирает стрелять, тем самым продолжая своё изначальное действие</li>
     * <li>Во <b>вторую фазу</b> персонаж игрока производит выстрел по врагу в зоне прицеливания</li>
     * </ol>
     * У действия, рассмотренного в примере, есть два поддействия, каждый из которых выполняется в свою фазу. При
     * этом перед выполнением второго действия происходит уточнение деталей действия у игрока.
     */
    void takeTurn();

    /**
     * Возвращает объект, руководящий подпиской на события в бою. Уведомление о событиях может приходить в
     * асинхронном режиме. События позволяют проинформировать наблюдателя о ходе боя (не путать с событиями,
     * выполняемыми в {@link ru.jengine.eventqueue.Dispatcher})
     */
    BattleActionPresenter getBattlePresenter();

    /**
     * Исполняет событие в рамках текущего боя. Позволяет исполнить событие из-вне боя
     * @param event событие, которое будет исполнено в текущем бою
     */
    void handleBattleEvent(BattleEvent event);

    /**
     * Останавливает бой и освобождает занятые боем игровые ресурсы
     */
    void stopBattle();
}
